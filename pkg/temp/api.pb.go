 /*
Copyright 2022 The KubeEdge Authors.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.

package v1alpha1

import (
	proto "github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	fmt "fmt"
	math "math"
	google_protobuf "google.golang.org/protobuf/types/known/anypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MapperRegisterRequest struct {
	// The flag to show how device manager returns.
	// True means device manager should return the device list in the response.
	// False means device manager should just return nothing.
	WithData bool `protobuf:"varint,1,opt,name=withData" json:"withData,omitempty"`
	// Mapper information to be registered to the device manager.
	Mapper *MapperInfo `protobuf:"bytes,2,opt,name=mapper" json:"mapper,omitempty"`
}

func (m *MapperRegisterRequest) Reset()                    { *m = MapperRegisterRequest{} }
func (m *MapperRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*MapperRegisterRequest) ProtoMessage()               {}
func (*MapperRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MapperRegisterRequest) GetWithData() bool {
	if m != nil {
		return m.WithData
	}
	return false
}

func (m *MapperRegisterRequest) GetMapper() *MapperInfo {
	if m != nil {
		return m.Mapper
	}
	return nil
}

type MapperRegisterResponse struct {
	// List of device models which the mapper maintains.
	ModelList []*DeviceModel `protobuf:"bytes,1,rep,name=modelList" json:"modelList,omitempty"`
	// List of devices which the mapper maintains.
	DeviceList []*Device `protobuf:"bytes,2,rep,name=deviceList" json:"deviceList,omitempty"`
}

func (m *MapperRegisterResponse) Reset()                    { *m = MapperRegisterResponse{} }
func (m *MapperRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*MapperRegisterResponse) ProtoMessage()               {}
func (*MapperRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MapperRegisterResponse) GetModelList() []*DeviceModel {
	if m != nil {
		return m.ModelList
	}
	return nil
}

func (m *MapperRegisterResponse) GetDeviceList() []*Device {
	if m != nil {
		return m.DeviceList
	}
	return nil
}

// DeviceModel specifies the information of a device model.
type DeviceModel struct {
	// Name of a device model.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Specification of a device model.
	Spec *DeviceModelSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *DeviceModel) Reset()                    { *m = DeviceModel{} }
func (m *DeviceModel) String() string            { return proto.CompactTextString(m) }
func (*DeviceModel) ProtoMessage()               {}
func (*DeviceModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeviceModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceModel) GetSpec() *DeviceModelSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// DeviceModelSpec is the specification of a device model.
type DeviceModelSpec struct {
	// The properties provided by the device of this device model.
	Properties []*DeviceProperty `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
	// The commands executed by the device of this device model.
	Commands []*DeviceCommand `protobuf:"bytes,2,rep,name=commands" json:"commands,omitempty"`
	// The protocol name used by the device of this device model.
	Protocol string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *DeviceModelSpec) Reset()                    { *m = DeviceModelSpec{} }
func (m *DeviceModelSpec) String() string            { return proto.CompactTextString(m) }
func (*DeviceModelSpec) ProtoMessage()               {}
func (*DeviceModelSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeviceModelSpec) GetProperties() []*DeviceProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *DeviceModelSpec) GetCommands() []*DeviceCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *DeviceModelSpec) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// DeviceProperty is the property of a device.
type DeviceProperty struct {
	// The name of this property.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The description of this property.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The specific type of this property.
	Type *PropertyType `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *DeviceProperty) Reset()                    { *m = DeviceProperty{} }
func (m *DeviceProperty) String() string            { return proto.CompactTextString(m) }
func (*DeviceProperty) ProtoMessage()               {}
func (*DeviceProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeviceProperty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceProperty) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DeviceProperty) GetType() *PropertyType {
	if m != nil {
		return m.Type
	}
	return nil
}

// PropertyType is the type of a property.
type PropertyType struct {
	// Property of Type Int64.
	Int *PropertyTypeInt64 `protobuf:"bytes,1,opt,name=int" json:"int,omitempty"`
	// Property of Type String.
	String_ *PropertyTypeString `protobuf:"bytes,2,opt,name=string" json:"string,omitempty"`
	// Property of Type Double.
	Double *PropertyTypeDouble `protobuf:"bytes,3,opt,name=double" json:"double,omitempty"`
	// Property of Type Float.
	Float *PropertyTypeFloat `protobuf:"bytes,4,opt,name=float" json:"float,omitempty"`
	// Property of Type Boolean.
	Boolean *PropertyTypeBoolean `protobuf:"bytes,5,opt,name=boolean" json:"boolean,omitempty"`
	// Property of Type Bytes.
	Bytes *PropertyTypeBytes `protobuf:"bytes,6,opt,name=bytes" json:"bytes,omitempty"`
}

func (m *PropertyType) Reset()                    { *m = PropertyType{} }
func (m *PropertyType) String() string            { return proto.CompactTextString(m) }
func (*PropertyType) ProtoMessage()               {}
func (*PropertyType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PropertyType) GetInt() *PropertyTypeInt64 {
	if m != nil {
		return m.Int
	}
	return nil
}

func (m *PropertyType) GetString_() *PropertyTypeString {
	if m != nil {
		return m.String_
	}
	return nil
}

func (m *PropertyType) GetDouble() *PropertyTypeDouble {
	if m != nil {
		return m.Double
	}
	return nil
}

func (m *PropertyType) GetFloat() *PropertyTypeFloat {
	if m != nil {
		return m.Float
	}
	return nil
}

func (m *PropertyType) GetBoolean() *PropertyTypeBoolean {
	if m != nil {
		return m.Boolean
	}
	return nil
}

func (m *PropertyType) GetBytes() *PropertyTypeBytes {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// The Specification of property of Int64.
type PropertyTypeInt64 struct {
	// The access mode of this property, ReadOnly or ReadWrite.
	AccessMode string `protobuf:"bytes,1,opt,name=accessMode" json:"accessMode,omitempty"`
	// The default value of this property.
	DefaultValue int64 `protobuf:"varint,2,opt,name=defaultValue" json:"defaultValue,omitempty"`
	// The minimum value of this property.
	Minimum int64 `protobuf:"varint,3,opt,name=minimum" json:"minimum,omitempty"`
	// The maximum value of this property.
	Maximum int64 `protobuf:"varint,4,opt,name=maximum" json:"maximum,omitempty"`
	// The unit of this property.
	Unit string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
}

func (m *PropertyTypeInt64) Reset()                    { *m = PropertyTypeInt64{} }
func (m *PropertyTypeInt64) String() string            { return proto.CompactTextString(m) }
func (*PropertyTypeInt64) ProtoMessage()               {}
func (*PropertyTypeInt64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PropertyTypeInt64) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

func (m *PropertyTypeInt64) GetDefaultValue() int64 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

func (m *PropertyTypeInt64) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *PropertyTypeInt64) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *PropertyTypeInt64) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

// The Specification of property of String.
type PropertyTypeString struct {
	// The access mode of this property, ReadOnly or ReadWrite.
	AccessMode string `protobuf:"bytes,1,opt,name=accessMode" json:"accessMode,omitempty"`
	// The default value of this property.
	DefaultValue string `protobuf:"bytes,2,opt,name=defaultValue" json:"defaultValue,omitempty"`
}

func (m *PropertyTypeString) Reset()                    { *m = PropertyTypeString{} }
func (m *PropertyTypeString) String() string            { return proto.CompactTextString(m) }
func (*PropertyTypeString) ProtoMessage()               {}
func (*PropertyTypeString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PropertyTypeString) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

func (m *PropertyTypeString) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

// The Specification of property of Double.
type PropertyTypeDouble struct {
	// The access mode of this property, ReadOnly or ReadWrite.
	AccessMode string `protobuf:"bytes,1,opt,name=accessMode" json:"accessMode,omitempty"`
	// The default value of this property.
	DefaultValue float64 `protobuf:"fixed64,2,opt,name=defaultValue" json:"defaultValue,omitempty"`
	// The minimum value of this property.
	Minimum float64 `protobuf:"fixed64,3,opt,name=minimum" json:"minimum,omitempty"`
	// The maximum value of this property.
	Maximum float64 `protobuf:"fixed64,4,opt,name=maximum" json:"maximum,omitempty"`
	// The unit of this property.
	Unit string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
}

func (m *PropertyTypeDouble) Reset()                    { *m = PropertyTypeDouble{} }
func (m *PropertyTypeDouble) String() string            { return proto.CompactTextString(m) }
func (*PropertyTypeDouble) ProtoMessage()               {}
func (*PropertyTypeDouble) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PropertyTypeDouble) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

func (m *PropertyTypeDouble) GetDefaultValue() float64 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

func (m *PropertyTypeDouble) GetMinimum() float64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *PropertyTypeDouble) GetMaximum() float64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *PropertyTypeDouble) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

// The Specification of property of Float.
type PropertyTypeFloat struct {
	// The access mode of this property, ReadOnly or ReadWrite.
	AccessMode string `protobuf:"bytes,1,opt,name=accessMode" json:"accessMode,omitempty"`
	// The default value of this property.
	DefaultValue float32 `protobuf:"fixed32,2,opt,name=defaultValue" json:"defaultValue,omitempty"`
	// The minimum value of this property.
	Minimum float32 `protobuf:"fixed32,3,opt,name=minimum" json:"minimum,omitempty"`
	// The maximum value of this property.
	Maximum float32 `protobuf:"fixed32,4,opt,name=maximum" json:"maximum,omitempty"`
	// The unit of this property.
	Unit string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
}

func (m *PropertyTypeFloat) Reset()                    { *m = PropertyTypeFloat{} }
func (m *PropertyTypeFloat) String() string            { return proto.CompactTextString(m) }
func (*PropertyTypeFloat) ProtoMessage()               {}
func (*PropertyTypeFloat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PropertyTypeFloat) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

func (m *PropertyTypeFloat) GetDefaultValue() float32 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

func (m *PropertyTypeFloat) GetMinimum() float32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *PropertyTypeFloat) GetMaximum() float32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *PropertyTypeFloat) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

// The Specification of property of Boolean.
type PropertyTypeBoolean struct {
	// The access mode of this property, ReadOnly or ReadWrite.
	AccessMode string `protobuf:"bytes,1,opt,name=accessMode" json:"accessMode,omitempty"`
	// The default value of this property.
	DefaultValue bool `protobuf:"varint,2,opt,name=defaultValue" json:"defaultValue,omitempty"`
}

func (m *PropertyTypeBoolean) Reset()                    { *m = PropertyTypeBoolean{} }
func (m *PropertyTypeBoolean) String() string            { return proto.CompactTextString(m) }
func (*PropertyTypeBoolean) ProtoMessage()               {}
func (*PropertyTypeBoolean) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PropertyTypeBoolean) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

func (m *PropertyTypeBoolean) GetDefaultValue() bool {
	if m != nil {
		return m.DefaultValue
	}
	return false
}

// The Specification of property of Bytes.
type PropertyTypeBytes struct {
	// The access mode of this property, ReadOnly or ReadWrite.
	AccessMode string `protobuf:"bytes,1,opt,name=accessMode" json:"accessMode,omitempty"`
}

func (m *PropertyTypeBytes) Reset()                    { *m = PropertyTypeBytes{} }
func (m *PropertyTypeBytes) String() string            { return proto.CompactTextString(m) }
func (*PropertyTypeBytes) ProtoMessage()               {}
func (*PropertyTypeBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PropertyTypeBytes) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

// DeviceCommond is the description of a command which the device supports.
type DeviceCommand struct {
	// Name of the command.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Url of the command to access.
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Method of the command.
	Method string `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	// Status code list which the command can return.
	StatusCode []string `protobuf:"bytes,4,rep,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Parameter list which the command carries.
	Parameters []string `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty"`
	// Response examples of the command.
	Response []byte `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *DeviceCommand) Reset()                    { *m = DeviceCommand{} }
func (m *DeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*DeviceCommand) ProtoMessage()               {}
func (*DeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeviceCommand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceCommand) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DeviceCommand) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *DeviceCommand) GetStatusCode() []string {
	if m != nil {
		return m.StatusCode
	}
	return nil
}

func (m *DeviceCommand) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *DeviceCommand) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

// Device is the description of a device instance.
type Device struct {
	// Name of the device.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Specification of the device.
	Spec *DeviceSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status of the device.
	Status *DeviceStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetSpec() *DeviceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Device) GetStatus() *DeviceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// DeviceSpec is the specification of the device.
type DeviceSpec struct {
	// The device model which the device references.
	DeviceModelReference string `protobuf:"bytes,1,opt,name=deviceModelReference" json:"deviceModelReference,omitempty"`
	// The specific config of the protocol to access to the device.
	Protocol *ProtocolConfig `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	// The visitor to collect the properties of the device.
	PropertyVisitors []*DevicePropertyVisitor `protobuf:"bytes,3,rep,name=propertyVisitors" json:"propertyVisitors,omitempty"`
}

func (m *DeviceSpec) Reset()                    { *m = DeviceSpec{} }
func (m *DeviceSpec) String() string            { return proto.CompactTextString(m) }
func (*DeviceSpec) ProtoMessage()               {}
func (*DeviceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeviceSpec) GetDeviceModelReference() string {
	if m != nil {
		return m.DeviceModelReference
	}
	return ""
}

func (m *DeviceSpec) GetProtocol() *ProtocolConfig {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *DeviceSpec) GetPropertyVisitors() []*DevicePropertyVisitor {
	if m != nil {
		return m.PropertyVisitors
	}
	return nil
}

// ProtocolConfig is the specific config of the protocol to access to the device.
type ProtocolConfig struct {
	// The specific config of the protocol of OpcUA.
	Opcua *ProtocolConfigOpcUA `protobuf:"bytes,1,opt,name=opcua" json:"opcua,omitempty"`
	// The specific config of the protocol of Modbus.
	Modbus *ProtocolConfigModbus `protobuf:"bytes,2,opt,name=modbus" json:"modbus,omitempty"`
	// The specific config of the protocol of Bluetooth.
	Bluetooth *ProtocolConfigBluetooth `protobuf:"bytes,3,opt,name=bluetooth" json:"bluetooth,omitempty"`
	// The common config for device.
	Common *ProtocolConfigCommon `protobuf:"bytes,4,opt,name=common" json:"common,omitempty"`
	// The specific config of the customized protocol.
	CustomizedProtocol *ProtocolConfigCustomized `protobuf:"bytes,5,opt,name=customizedProtocol" json:"customizedProtocol,omitempty"`
}

func (m *ProtocolConfig) Reset()                    { *m = ProtocolConfig{} }
func (m *ProtocolConfig) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfig) ProtoMessage()               {}
func (*ProtocolConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ProtocolConfig) GetOpcua() *ProtocolConfigOpcUA {
	if m != nil {
		return m.Opcua
	}
	return nil
}

func (m *ProtocolConfig) GetModbus() *ProtocolConfigModbus {
	if m != nil {
		return m.Modbus
	}
	return nil
}

func (m *ProtocolConfig) GetBluetooth() *ProtocolConfigBluetooth {
	if m != nil {
		return m.Bluetooth
	}
	return nil
}

func (m *ProtocolConfig) GetCommon() *ProtocolConfigCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *ProtocolConfig) GetCustomizedProtocol() *ProtocolConfigCustomized {
	if m != nil {
		return m.CustomizedProtocol
	}
	return nil
}

// ProtocolConfigOpcUA is the config of the protocol of OpcUA.
type ProtocolConfigOpcUA struct {
	// URL of the device.
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// The user name to access to the device.
	UserName string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	// The file path to store the password to access to the device like /ca/paas.
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	// The security policy of the device like Basic256Sha256.
	SecurityPolicy string `protobuf:"bytes,4,opt,name=securityPolicy" json:"securityPolicy,omitempty"`
	// The security mode of the device like Sign.
	SecurityMode string `protobuf:"bytes,5,opt,name=securityMode" json:"securityMode,omitempty"`
	// The file path to store the certificate to access to the device like /ca/clientcert.pem.
	Certificate string `protobuf:"bytes,6,opt,name=certificate" json:"certificate,omitempty"`
	// The file path to store the private key to access to the device like /ca/clientkey.pem.
	PrivateKey string `protobuf:"bytes,7,opt,name=privateKey" json:"privateKey,omitempty"`
	Timeout    int64  `protobuf:"varint,8,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *ProtocolConfigOpcUA) Reset()                    { *m = ProtocolConfigOpcUA{} }
func (m *ProtocolConfigOpcUA) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigOpcUA) ProtoMessage()               {}
func (*ProtocolConfigOpcUA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ProtocolConfigOpcUA) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetSecurityPolicy() string {
	if m != nil {
		return m.SecurityPolicy
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetSecurityMode() string {
	if m != nil {
		return m.SecurityMode
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *ProtocolConfigOpcUA) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// ProtocolConfigModbus is the config of the protocol of Modbus.
type ProtocolConfigModbus struct {
	// The ID of the slave.
	SlaveID int64 `protobuf:"varint,1,opt,name=slaveID" json:"slaveID,omitempty"`
}

func (m *ProtocolConfigModbus) Reset()                    { *m = ProtocolConfigModbus{} }
func (m *ProtocolConfigModbus) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigModbus) ProtoMessage()               {}
func (*ProtocolConfigModbus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ProtocolConfigModbus) GetSlaveID() int64 {
	if m != nil {
		return m.SlaveID
	}
	return 0
}

// The specific config of the protocol of Bluetooth.
type ProtocolConfigBluetooth struct {
	// The mac address of the bluetooth device.
	MacAddress string `protobuf:"bytes,1,opt,name=macAddress" json:"macAddress,omitempty"`
}

func (m *ProtocolConfigBluetooth) Reset()                    { *m = ProtocolConfigBluetooth{} }
func (m *ProtocolConfigBluetooth) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigBluetooth) ProtoMessage()               {}
func (*ProtocolConfigBluetooth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ProtocolConfigBluetooth) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

// The common config for device.
type ProtocolConfigCommon struct {
	// ProtocolConfigCOM is the config of com.
	Com *ProtocolConfigCOM `protobuf:"bytes,1,opt,name=com" json:"com,omitempty"`
	// ProtocolConfigTCP is the config of tcp.
	Tcp *ProtocolConfigTCP `protobuf:"bytes,2,opt,name=tcp" json:"tcp,omitempty"`
	// commType is the type of the communication.
	CommType string `protobuf:"bytes,3,opt,name=commType" json:"commType,omitempty"`
	// reconnTimeout is the time out of reconnection.
	ReconnTimeout int64 `protobuf:"varint,4,opt,name=reconnTimeout" json:"reconnTimeout,omitempty"`
	// reconnRetryTimes is the retry times of reconnection.
	ReconnRetryTimes int64 `protobuf:"varint,5,opt,name=reconnRetryTimes" json:"reconnRetryTimes,omitempty"`
	// collectTimeout is the time out of collection.
	CollectTimeout int64 `protobuf:"varint,6,opt,name=collectTimeout" json:"collectTimeout,omitempty"`
	// collectRetryTimes is the retry times of collection.
	CollectRetryTimes int64 `protobuf:"varint,7,opt,name=collectRetryTimes" json:"collectRetryTimes,omitempty"`
	// collectType is the type of collection.
	CollectType string `protobuf:"bytes,8,opt,name=collectType" json:"collectType,omitempty"`
	// CustomizedValue is the customized value for developers.
	CustomizedValues *CustomizedValue `protobuf:"bytes,9,opt,name=customizedValues" json:"customizedValues,omitempty"`
}

func (m *ProtocolConfigCommon) Reset()                    { *m = ProtocolConfigCommon{} }
func (m *ProtocolConfigCommon) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigCommon) ProtoMessage()               {}
func (*ProtocolConfigCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ProtocolConfigCommon) GetCom() *ProtocolConfigCOM {
	if m != nil {
		return m.Com
	}
	return nil
}

func (m *ProtocolConfigCommon) GetTcp() *ProtocolConfigTCP {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *ProtocolConfigCommon) GetCommType() string {
	if m != nil {
		return m.CommType
	}
	return ""
}

func (m *ProtocolConfigCommon) GetReconnTimeout() int64 {
	if m != nil {
		return m.ReconnTimeout
	}
	return 0
}

func (m *ProtocolConfigCommon) GetReconnRetryTimes() int64 {
	if m != nil {
		return m.ReconnRetryTimes
	}
	return 0
}

func (m *ProtocolConfigCommon) GetCollectTimeout() int64 {
	if m != nil {
		return m.CollectTimeout
	}
	return 0
}

func (m *ProtocolConfigCommon) GetCollectRetryTimes() int64 {
	if m != nil {
		return m.CollectRetryTimes
	}
	return 0
}

func (m *ProtocolConfigCommon) GetCollectType() string {
	if m != nil {
		return m.CollectType
	}
	return ""
}

func (m *ProtocolConfigCommon) GetCustomizedValues() *CustomizedValue {
	if m != nil {
		return m.CustomizedValues
	}
	return nil
}

// ProtocolConfigCOM is the config of com.
type ProtocolConfigCOM struct {
	// serialPort is the port of serial.
	SerialPort string `protobuf:"bytes,1,opt,name=serialPort" json:"serialPort,omitempty"`
	// baudRate is the rate of baud.
	BaudRate int64 `protobuf:"varint,2,opt,name=baudRate" json:"baudRate,omitempty"`
	// dataBits is the bits of data.
	DataBits int64 `protobuf:"varint,3,opt,name=dataBits" json:"dataBits,omitempty"`
	// parity is the bit of parity.
	Parity string `protobuf:"bytes,4,opt,name=parity" json:"parity,omitempty"`
	// stopBits is the bit of stop.
	StopBits int64 `protobuf:"varint,5,opt,name=stopBits" json:"stopBits,omitempty"`
}

func (m *ProtocolConfigCOM) Reset()                    { *m = ProtocolConfigCOM{} }
func (m *ProtocolConfigCOM) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigCOM) ProtoMessage()               {}
func (*ProtocolConfigCOM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ProtocolConfigCOM) GetSerialPort() string {
	if m != nil {
		return m.SerialPort
	}
	return ""
}

func (m *ProtocolConfigCOM) GetBaudRate() int64 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *ProtocolConfigCOM) GetDataBits() int64 {
	if m != nil {
		return m.DataBits
	}
	return 0
}

func (m *ProtocolConfigCOM) GetParity() string {
	if m != nil {
		return m.Parity
	}
	return ""
}

func (m *ProtocolConfigCOM) GetStopBits() int64 {
	if m != nil {
		return m.StopBits
	}
	return 0
}

// ProtocolConfigTCP is the config of tcp.
type ProtocolConfigTCP struct {
	// IP of tcp for the device.
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// port of tcp for the device.
	Port int64 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *ProtocolConfigTCP) Reset()                    { *m = ProtocolConfigTCP{} }
func (m *ProtocolConfigTCP) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigTCP) ProtoMessage()               {}
func (*ProtocolConfigTCP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ProtocolConfigTCP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProtocolConfigTCP) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

// CustomizedValue is the customized value for developers.
type CustomizedValue struct {
	// data is the customized value and it can be any form.
	Data map[string]*google_protobuf.Any `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CustomizedValue) Reset()                    { *m = CustomizedValue{} }
func (m *CustomizedValue) String() string            { return proto.CompactTextString(m) }
func (*CustomizedValue) ProtoMessage()               {}
func (*CustomizedValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CustomizedValue) GetData() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// The specific config of the customized protocol.
type ProtocolConfigCustomized struct {
	// the name of the customized protocol.
	ProtocolName string `protobuf:"bytes,1,opt,name=protocolName" json:"protocolName,omitempty"`
	// the config data of the customized protocol.
	ConfigData *CustomizedValue `protobuf:"bytes,2,opt,name=configData" json:"configData,omitempty"`
}

func (m *ProtocolConfigCustomized) Reset()                    { *m = ProtocolConfigCustomized{} }
func (m *ProtocolConfigCustomized) String() string            { return proto.CompactTextString(m) }
func (*ProtocolConfigCustomized) ProtoMessage()               {}
func (*ProtocolConfigCustomized) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ProtocolConfigCustomized) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *ProtocolConfigCustomized) GetConfigData() *CustomizedValue {
	if m != nil {
		return m.ConfigData
	}
	return nil
}

// The visitor to collect the properties of the device.
type DevicePropertyVisitor struct {
	// the name of the property.
	PropertyName string `protobuf:"bytes,1,opt,name=propertyName" json:"propertyName,omitempty"`
	// the cycle to report data.
	ReportCycle int64 `protobuf:"varint,2,opt,name=reportCycle" json:"reportCycle,omitempty"`
	// the cycle to collect data.
	CollectCycle int64 `protobuf:"varint,3,opt,name=collectCycle" json:"collectCycle,omitempty"`
	// CustomizedValue is the customized value for developers.
	CustomizedValues *CustomizedValue `protobuf:"bytes,4,opt,name=customizedValues" json:"customizedValues,omitempty"`
	// the visitor to collect the properties of the device of OPC UA.
	Opcua *VisitorConfigOPCUA `protobuf:"bytes,5,opt,name=opcua" json:"opcua,omitempty"`
	// the visitor to collect the properties of the device of Modbus.
	Modbus *VisitorConfigModbus `protobuf:"bytes,6,opt,name=modbus" json:"modbus,omitempty"`
	// the visitor to collect the properties of the device of Bluetooth.
	Bluetooth *VisitorConfigBluetooth `protobuf:"bytes,7,opt,name=bluetooth" json:"bluetooth,omitempty"`
	// the visitor to collect the properties of the device of customized protocol.
	CustomizedProtocol *VisitorConfigCustomized `protobuf:"bytes,8,opt,name=customizedProtocol" json:"customizedProtocol,omitempty"`
	// the visitor to report properties of the value.
	PushMethod *VisitorConfigPushMethod `protobuf:"bytes,9,opt,name=pushMethod" json:"pushMethod,omitempty"`
	DbProvider *VisitorConfigDbProvider `protobuf:"bytes,10,opt,name=dbProvider" json:"dbProvider,omitempty"`
}

func (m *DevicePropertyVisitor) Reset()                    { *m = DevicePropertyVisitor{} }
func (m *DevicePropertyVisitor) String() string            { return proto.CompactTextString(m) }
func (*DevicePropertyVisitor) ProtoMessage()               {}
func (*DevicePropertyVisitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DevicePropertyVisitor) GetPropertyName() string {
	if m != nil {
		return m.PropertyName
	}
	return ""
}

func (m *DevicePropertyVisitor) GetReportCycle() int64 {
	if m != nil {
		return m.ReportCycle
	}
	return 0
}

func (m *DevicePropertyVisitor) GetCollectCycle() int64 {
	if m != nil {
		return m.CollectCycle
	}
	return 0
}

func (m *DevicePropertyVisitor) GetCustomizedValues() *CustomizedValue {
	if m != nil {
		return m.CustomizedValues
	}
	return nil
}

func (m *DevicePropertyVisitor) GetOpcua() *VisitorConfigOPCUA {
	if m != nil {
		return m.Opcua
	}
	return nil
}

func (m *DevicePropertyVisitor) GetModbus() *VisitorConfigModbus {
	if m != nil {
		return m.Modbus
	}
	return nil
}

func (m *DevicePropertyVisitor) GetBluetooth() *VisitorConfigBluetooth {
	if m != nil {
		return m.Bluetooth
	}
	return nil
}

func (m *DevicePropertyVisitor) GetCustomizedProtocol() *VisitorConfigCustomized {
	if m != nil {
		return m.CustomizedProtocol
	}
	return nil
}

func (m *DevicePropertyVisitor) GetPushMethod() *VisitorConfigPushMethod {
	if m != nil {
		return m.PushMethod
	}
	return nil
}

func (m *DevicePropertyVisitor) GetDbProvider() *VisitorConfigDbProvider {
	if m != nil {
		return m.DbProvider
	}
	return nil
}

// the visitor to report properties of the value.
type VisitorConfigPushMethod struct {
	// the visitor to report the properties of the device by customized method.
	CustomizedProtocol *VisitorConfigCustomized `protobuf:"bytes,1,opt,name=customizedProtocol" json:"customizedProtocol,omitempty"`
	// the visitor to report the properties of the device by http.
	Http *PushMethodHTTP `protobuf:"bytes,2,opt,name=http" json:"http,omitempty"`
	// the visitor to report the properties of the device by mqtt.
	Mqtt *PushMethodMQTT `protobuf:"bytes,3,opt,name=mqtt" json:"mqtt,omitempty"`
}

func (m *VisitorConfigPushMethod) Reset()                    { *m = VisitorConfigPushMethod{} }
func (m *VisitorConfigPushMethod) String() string            { return proto.CompactTextString(m) }
func (*VisitorConfigPushMethod) ProtoMessage()               {}
func (*VisitorConfigPushMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *VisitorConfigPushMethod) GetCustomizedProtocol() *VisitorConfigCustomized {
	if m != nil {
		return m.CustomizedProtocol
	}
	return nil
}

func (m *VisitorConfigPushMethod) GetHttp() *PushMethodHTTP {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *VisitorConfigPushMethod) GetMqtt() *PushMethodMQTT {
	if m != nil {
		return m.Mqtt
	}
	return nil
}

type VisitorConfigDbProvider struct {
	// the visitor to report the properties of the device by customized method.
	Influx *DbProviderInflux `protobuf:"bytes,1,opt,name=influx" json:"influx,omitempty"`
}

func (m *VisitorConfigDbProvider) Reset()                    { *m = VisitorConfigDbProvider{} }
func (m *VisitorConfigDbProvider) String() string            { return proto.CompactTextString(m) }
func (*VisitorConfigDbProvider) ProtoMessage()               {}
func (*VisitorConfigDbProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *VisitorConfigDbProvider) GetInflux() *DbProviderInflux {
	if m != nil {
		return m.Influx
	}
	return nil
}

type DbProviderInflux struct {
	// the visitor to report the properties of the device by customized method.
	ConfigData   *ConfigData   `protobuf:"bytes,1,opt,name=configData" json:"configData,omitempty"`
	DataStandard *DataStandard `protobuf:"bytes,2,opt,name=dataStandard" json:"dataStandard,omitempty"`
}

func (m *DbProviderInflux) Reset()                    { *m = DbProviderInflux{} }
func (m *DbProviderInflux) String() string            { return proto.CompactTextString(m) }
func (*DbProviderInflux) ProtoMessage()               {}
func (*DbProviderInflux) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DbProviderInflux) GetConfigData() *ConfigData {
	if m != nil {
		return m.ConfigData
	}
	return nil
}

func (m *DbProviderInflux) GetDataStandard() *DataStandard {
	if m != nil {
		return m.DataStandard
	}
	return nil
}

type DataStandard struct {
	// broker address, like mqtt://127.0.0.1:1883
	Measurement string `protobuf:"bytes,1,opt,name=measurement" json:"measurement,omitempty"`
	TagKey      string `protobuf:"bytes,2,opt,name=tagKey" json:"tagKey,omitempty"`
	TagValue    string `protobuf:"bytes,3,opt,name=tagValue" json:"tagValue,omitempty"`
	FieldKey    string `protobuf:"bytes,4,opt,name=fieldKey" json:"fieldKey,omitempty"`
}

func (m *DataStandard) Reset()                    { *m = DataStandard{} }
func (m *DataStandard) String() string            { return proto.CompactTextString(m) }
func (*DataStandard) ProtoMessage()               {}
func (*DataStandard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DataStandard) GetMeasurement() string {
	if m != nil {
		return m.Measurement
	}
	return ""
}

func (m *DataStandard) GetTagKey() string {
	if m != nil {
		return m.TagKey
	}
	return ""
}

func (m *DataStandard) GetTagValue() string {
	if m != nil {
		return m.TagValue
	}
	return ""
}

func (m *DataStandard) GetFieldKey() string {
	if m != nil {
		return m.FieldKey
	}
	return ""
}

type ConfigData struct {
	// broker address, like mqtt://127.0.0.1:1883
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// publish topic for mqtt
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// qos of mqtt publish param
	Org string `protobuf:"bytes,3,opt,name=org" json:"org,omitempty"`
	// is the message retained
	Bucket string `protobuf:"bytes,4,opt,name=bucket" json:"bucket,omitempty"`
}

func (m *ConfigData) Reset()                    { *m = ConfigData{} }
func (m *ConfigData) String() string            { return proto.CompactTextString(m) }
func (*ConfigData) ProtoMessage()               {}
func (*ConfigData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ConfigData) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ConfigData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ConfigData) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *ConfigData) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// the visitor to report the properties of the device by mqtt
type PushMethodMQTT struct {
	// broker address, like mqtt://127.0.0.1:1883
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// publish topic for mqtt
	Topic string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	// qos of mqtt publish param
	Qos int32 `protobuf:"varint,3,opt,name=qos" json:"qos,omitempty"`
	// is the message retained
	Retained bool `protobuf:"varint,4,opt,name=retained" json:"retained,omitempty"`
}

func (m *PushMethodMQTT) Reset()                    { *m = PushMethodMQTT{} }
func (m *PushMethodMQTT) String() string            { return proto.CompactTextString(m) }
func (*PushMethodMQTT) ProtoMessage()               {}
func (*PushMethodMQTT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *PushMethodMQTT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PushMethodMQTT) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PushMethodMQTT) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *PushMethodMQTT) GetRetained() bool {
	if m != nil {
		return m.Retained
	}
	return false
}

// the visitor to report the properties of the device by http.
type PushMethodHTTP struct {
	// host name for publish
	HostName string `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	// port for publish
	Port int64 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// the URL path for the request, like /api/users
	RequestPath string `protobuf:"bytes,3,opt,name=requestPath" json:"requestPath,omitempty"`
	// timeout configuration for http request
	Timeout int64 `protobuf:"varint,4,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *PushMethodHTTP) Reset()                    { *m = PushMethodHTTP{} }
func (m *PushMethodHTTP) String() string            { return proto.CompactTextString(m) }
func (*PushMethodHTTP) ProtoMessage()               {}
func (*PushMethodHTTP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PushMethodHTTP) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *PushMethodHTTP) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PushMethodHTTP) GetRequestPath() string {
	if m != nil {
		return m.RequestPath
	}
	return ""
}

func (m *PushMethodHTTP) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// the visitor to collect the properties of the device of OPC UA.
type VisitorConfigOPCUA struct {
	// ID of the node.
	NodeID string `protobuf:"bytes,1,opt,name=nodeID" json:"nodeID,omitempty"`
	// name of browse.
	BrowseName string `protobuf:"bytes,2,opt,name=browseName" json:"browseName,omitempty"`
}

func (m *VisitorConfigOPCUA) Reset()                    { *m = VisitorConfigOPCUA{} }
func (m *VisitorConfigOPCUA) String() string            { return proto.CompactTextString(m) }
func (*VisitorConfigOPCUA) ProtoMessage()               {}
func (*VisitorConfigOPCUA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *VisitorConfigOPCUA) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *VisitorConfigOPCUA) GetBrowseName() string {
	if m != nil {
		return m.BrowseName
	}
	return ""
}

// the visitor to collect the properties of the device of Modbus.
type VisitorConfigModbus struct {
	// register of Modbus
	Register string `protobuf:"bytes,1,opt,name=register" json:"register,omitempty"`
	// offset of Modbus.
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// limit of Modbus.
	Limit int64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// scale of Modbus.
	Scale float64 `protobuf:"fixed64,4,opt,name=scale" json:"scale,omitempty"`
	// isSwap of Modbus.
	IsSwap bool `protobuf:"varint,5,opt,name=isSwap" json:"isSwap,omitempty"`
	// isRegisterSwap of Modbus.
	IsRegisterSwap bool `protobuf:"varint,6,opt,name=isRegisterSwap" json:"isRegisterSwap,omitempty"`
}

func (m *VisitorConfigModbus) Reset()                    { *m = VisitorConfigModbus{} }
func (m *VisitorConfigModbus) String() string            { return proto.CompactTextString(m) }
func (*VisitorConfigModbus) ProtoMessage()               {}
func (*VisitorConfigModbus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *VisitorConfigModbus) GetRegister() string {
	if m != nil {
		return m.Register
	}
	return ""
}

func (m *VisitorConfigModbus) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *VisitorConfigModbus) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *VisitorConfigModbus) GetScale() float64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *VisitorConfigModbus) GetIsSwap() bool {
	if m != nil {
		return m.IsSwap
	}
	return false
}

func (m *VisitorConfigModbus) GetIsRegisterSwap() bool {
	if m != nil {
		return m.IsRegisterSwap
	}
	return false
}

// the visitor to collect the properties of the device of Bluetooth.
type VisitorConfigBluetooth struct {
	// characteristicUUID of Bluetooth.
	CharacteristicUUID string `protobuf:"bytes,1,opt,name=characteristicUUID" json:"characteristicUUID,omitempty"`
	// dataWrite of Bluetooth.
	DataWrite map[string][]byte `protobuf:"bytes,2,rep,name=dataWrite" json:"dataWrite,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// BluetoothReadConverter of Bluetooth.
	DataConverter *BluetoothReadConverter `protobuf:"bytes,3,opt,name=dataConverter" json:"dataConverter,omitempty"`
}

func (m *VisitorConfigBluetooth) Reset()                    { *m = VisitorConfigBluetooth{} }
func (m *VisitorConfigBluetooth) String() string            { return proto.CompactTextString(m) }
func (*VisitorConfigBluetooth) ProtoMessage()               {}
func (*VisitorConfigBluetooth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *VisitorConfigBluetooth) GetCharacteristicUUID() string {
	if m != nil {
		return m.CharacteristicUUID
	}
	return ""
}

func (m *VisitorConfigBluetooth) GetDataWrite() map[string][]byte {
	if m != nil {
		return m.DataWrite
	}
	return nil
}

func (m *VisitorConfigBluetooth) GetDataConverter() *BluetoothReadConverter {
	if m != nil {
		return m.DataConverter
	}
	return nil
}

// BluetoothReadConverter of Bluetooth.
type BluetoothReadConverter struct {
	StartIndex        int64                  `protobuf:"varint,1,opt,name=startIndex" json:"startIndex,omitempty"`
	EndIndex          int64                  `protobuf:"varint,2,opt,name=endIndex" json:"endIndex,omitempty"`
	ShiftLeft         uint64                 `protobuf:"varint,3,opt,name=shiftLeft" json:"shiftLeft,omitempty"`
	ShiftRight        uint64                 `protobuf:"varint,4,opt,name=shiftRight" json:"shiftRight,omitempty"`
	OrderOfOperations []*BluetoothOperations `protobuf:"bytes,5,rep,name=orderOfOperations" json:"orderOfOperations,omitempty"`
}

func (m *BluetoothReadConverter) Reset()                    { *m = BluetoothReadConverter{} }
func (m *BluetoothReadConverter) String() string            { return proto.CompactTextString(m) }
func (*BluetoothReadConverter) ProtoMessage()               {}
func (*BluetoothReadConverter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *BluetoothReadConverter) GetStartIndex() int64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *BluetoothReadConverter) GetEndIndex() int64 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

func (m *BluetoothReadConverter) GetShiftLeft() uint64 {
	if m != nil {
		return m.ShiftLeft
	}
	return 0
}

func (m *BluetoothReadConverter) GetShiftRight() uint64 {
	if m != nil {
		return m.ShiftRight
	}
	return 0
}

func (m *BluetoothReadConverter) GetOrderOfOperations() []*BluetoothOperations {
	if m != nil {
		return m.OrderOfOperations
	}
	return nil
}

// BluetoothOperations of Bluetooth.
type BluetoothOperations struct {
	OperationType  string  `protobuf:"bytes,1,opt,name=operationType" json:"operationType,omitempty"`
	OperationValue float64 `protobuf:"fixed64,2,opt,name=operationValue" json:"operationValue,omitempty"`
}

func (m *BluetoothOperations) Reset()                    { *m = BluetoothOperations{} }
func (m *BluetoothOperations) String() string            { return proto.CompactTextString(m) }
func (*BluetoothOperations) ProtoMessage()               {}
func (*BluetoothOperations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *BluetoothOperations) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *BluetoothOperations) GetOperationValue() float64 {
	if m != nil {
		return m.OperationValue
	}
	return 0
}

// the visitor to collect the properties of the device of customized protocol.
type VisitorConfigCustomized struct {
	ProtocolName string           `protobuf:"bytes,1,opt,name=protocolName" json:"protocolName,omitempty"`
	ConfigData   *CustomizedValue `protobuf:"bytes,2,opt,name=configData" json:"configData,omitempty"`
}

func (m *VisitorConfigCustomized) Reset()                    { *m = VisitorConfigCustomized{} }
func (m *VisitorConfigCustomized) String() string            { return proto.CompactTextString(m) }
func (*VisitorConfigCustomized) ProtoMessage()               {}
func (*VisitorConfigCustomized) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *VisitorConfigCustomized) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *VisitorConfigCustomized) GetConfigData() *CustomizedValue {
	if m != nil {
		return m.ConfigData
	}
	return nil
}

// MapperInfo is the information of mapper.
type MapperInfo struct {
	// name of the mapper.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// version of the mapper.
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// api version of the mapper.
	ApiVersion string `protobuf:"bytes,3,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	// the protocol of the mapper.
	Protocol string `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
	// the address of the mapper. it is a unix domain socket of grpc.
	Address []byte `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// the state of the mapper.
	State string `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
}

func (m *MapperInfo) Reset()                    { *m = MapperInfo{} }
func (m *MapperInfo) String() string            { return proto.CompactTextString(m) }
func (*MapperInfo) ProtoMessage()               {}
func (*MapperInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *MapperInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MapperInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MapperInfo) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *MapperInfo) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *MapperInfo) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MapperInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type ReportDeviceStatusRequest struct {
	DeviceName     string        `protobuf:"bytes,1,opt,name=deviceName" json:"deviceName,omitempty"`
	ReportedDevice *DeviceStatus `protobuf:"bytes,2,opt,name=reportedDevice" json:"reportedDevice,omitempty"`
}

func (m *ReportDeviceStatusRequest) Reset()                    { *m = ReportDeviceStatusRequest{} }
func (m *ReportDeviceStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportDeviceStatusRequest) ProtoMessage()               {}
func (*ReportDeviceStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ReportDeviceStatusRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ReportDeviceStatusRequest) GetReportedDevice() *DeviceStatus {
	if m != nil {
		return m.ReportedDevice
	}
	return nil
}

// DeviceStatus is the status of the device.
type DeviceStatus struct {
	// the device twins of the device.
	Twins []*Twin `protobuf:"bytes,1,rep,name=twins" json:"twins,omitempty"`
	// the state of the device like Online or Offline.
	State string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *DeviceStatus) Reset()                    { *m = DeviceStatus{} }
func (m *DeviceStatus) String() string            { return proto.CompactTextString(m) }
func (*DeviceStatus) ProtoMessage()               {}
func (*DeviceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DeviceStatus) GetTwins() []*Twin {
	if m != nil {
		return m.Twins
	}
	return nil
}

func (m *DeviceStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// Twin is the digital model of a device. It contains a series of properties.
type Twin struct {
	// the name of the property.
	PropertyName string `protobuf:"bytes,1,opt,name=propertyName" json:"propertyName,omitempty"`
	// the desired value of the property configured by device manager.
	Desired *TwinProperty `protobuf:"bytes,2,opt,name=desired" json:"desired,omitempty"`
	// the reported value of the property from the real device.
	Reported *TwinProperty `protobuf:"bytes,3,opt,name=reported" json:"reported,omitempty"`
}

func (m *Twin) Reset()                    { *m = Twin{} }
func (m *Twin) String() string            { return proto.CompactTextString(m) }
func (*Twin) ProtoMessage()               {}
func (*Twin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Twin) GetPropertyName() string {
	if m != nil {
		return m.PropertyName
	}
	return ""
}

func (m *Twin) GetDesired() *TwinProperty {
	if m != nil {
		return m.Desired
	}
	return nil
}

func (m *Twin) GetReported() *TwinProperty {
	if m != nil {
		return m.Reported
	}
	return nil
}

// TwinProperty is the specification of the property.
type TwinProperty struct {
	// the value of the property.
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// the metadata to describe this property.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TwinProperty) Reset()                    { *m = TwinProperty{} }
func (m *TwinProperty) String() string            { return proto.CompactTextString(m) }
func (*TwinProperty) ProtoMessage()               {}
func (*TwinProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *TwinProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TwinProperty) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ReportDeviceStatusResponse struct {
}

func (m *ReportDeviceStatusResponse) Reset()                    { *m = ReportDeviceStatusResponse{} }
func (m *ReportDeviceStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportDeviceStatusResponse) ProtoMessage()               {}
func (*ReportDeviceStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type RegisterDeviceRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *RegisterDeviceRequest) Reset()                    { *m = RegisterDeviceRequest{} }
func (m *RegisterDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterDeviceRequest) ProtoMessage()               {}
func (*RegisterDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *RegisterDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type RegisterDeviceResponse struct {
	DeviceName string `protobuf:"bytes,1,opt,name=deviceName" json:"deviceName,omitempty"`
}

func (m *RegisterDeviceResponse) Reset()                    { *m = RegisterDeviceResponse{} }
func (m *RegisterDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterDeviceResponse) ProtoMessage()               {}
func (*RegisterDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *RegisterDeviceResponse) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type CreateDeviceModelRequest struct {
	Model *DeviceModel `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
}

func (m *CreateDeviceModelRequest) Reset()                    { *m = CreateDeviceModelRequest{} }
func (m *CreateDeviceModelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceModelRequest) ProtoMessage()               {}
func (*CreateDeviceModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CreateDeviceModelRequest) GetModel() *DeviceModel {
	if m != nil {
		return m.Model
	}
	return nil
}

type CreateDeviceModelResponse struct {
	DeviceModelName string `protobuf:"bytes,1,opt,name=deviceModelName" json:"deviceModelName,omitempty"`
}

func (m *CreateDeviceModelResponse) Reset()                    { *m = CreateDeviceModelResponse{} }
func (m *CreateDeviceModelResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceModelResponse) ProtoMessage()               {}
func (*CreateDeviceModelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CreateDeviceModelResponse) GetDeviceModelName() string {
	if m != nil {
		return m.DeviceModelName
	}
	return ""
}

type RemoveDeviceRequest struct {
	DeviceName string `protobuf:"bytes,1,opt,name=deviceName" json:"deviceName,omitempty"`
}

func (m *RemoveDeviceRequest) Reset()                    { *m = RemoveDeviceRequest{} }
func (m *RemoveDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveDeviceRequest) ProtoMessage()               {}
func (*RemoveDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *RemoveDeviceRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type RemoveDeviceResponse struct {
}

func (m *RemoveDeviceResponse) Reset()                    { *m = RemoveDeviceResponse{} }
func (m *RemoveDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveDeviceResponse) ProtoMessage()               {}
func (*RemoveDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

type RemoveDeviceModelRequest struct {
	ModelName string `protobuf:"bytes,1,opt,name=modelName" json:"modelName,omitempty"`
}

func (m *RemoveDeviceModelRequest) Reset()                    { *m = RemoveDeviceModelRequest{} }
func (m *RemoveDeviceModelRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveDeviceModelRequest) ProtoMessage()               {}
func (*RemoveDeviceModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *RemoveDeviceModelRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

type RemoveDeviceModelResponse struct {
}

func (m *RemoveDeviceModelResponse) Reset()                    { *m = RemoveDeviceModelResponse{} }
func (m *RemoveDeviceModelResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveDeviceModelResponse) ProtoMessage()               {}
func (*RemoveDeviceModelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type UpdateDeviceRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *UpdateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UpdateDeviceResponse struct {
}

func (m *UpdateDeviceResponse) Reset()                    { *m = UpdateDeviceResponse{} }
func (m *UpdateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceResponse) ProtoMessage()               {}
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

type UpdateDeviceModelRequest struct {
	Model *DeviceModel `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
}

func (m *UpdateDeviceModelRequest) Reset()                    { *m = UpdateDeviceModelRequest{} }
func (m *UpdateDeviceModelRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceModelRequest) ProtoMessage()               {}
func (*UpdateDeviceModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *UpdateDeviceModelRequest) GetModel() *DeviceModel {
	if m != nil {
		return m.Model
	}
	return nil
}

type UpdateDeviceModelResponse struct {
}

func (m *UpdateDeviceModelResponse) Reset()                    { *m = UpdateDeviceModelResponse{} }
func (m *UpdateDeviceModelResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceModelResponse) ProtoMessage()               {}
func (*UpdateDeviceModelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

type UpdateDeviceStatusRequest struct {
	DeviceName    string        `protobuf:"bytes,1,opt,name=deviceName" json:"deviceName,omitempty"`
	DesiredDevice *DeviceStatus `protobuf:"bytes,2,opt,name=desiredDevice" json:"desiredDevice,omitempty"`
}

func (m *UpdateDeviceStatusRequest) Reset()                    { *m = UpdateDeviceStatusRequest{} }
func (m *UpdateDeviceStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceStatusRequest) ProtoMessage()               {}
func (*UpdateDeviceStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *UpdateDeviceStatusRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *UpdateDeviceStatusRequest) GetDesiredDevice() *DeviceStatus {
	if m != nil {
		return m.DesiredDevice
	}
	return nil
}

type UpdateDeviceStatusResponse struct {
}

func (m *UpdateDeviceStatusResponse) Reset()                    { *m = UpdateDeviceStatusResponse{} }
func (m *UpdateDeviceStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceStatusResponse) ProtoMessage()               {}
func (*UpdateDeviceStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

type GetDeviceRequest struct {
	DeviceName string `protobuf:"bytes,1,opt,name=deviceName" json:"deviceName,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *GetDeviceRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type GetDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *GetDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func init() {
	proto.RegisterType((*MapperRegisterRequest)(nil), "v1alpha1.MapperRegisterRequest")
	proto.RegisterType((*MapperRegisterResponse)(nil), "v1alpha1.MapperRegisterResponse")
	proto.RegisterType((*DeviceModel)(nil), "v1alpha1.DeviceModel")
	proto.RegisterType((*DeviceModelSpec)(nil), "v1alpha1.DeviceModelSpec")
	proto.RegisterType((*DeviceProperty)(nil), "v1alpha1.DeviceProperty")
	proto.RegisterType((*PropertyType)(nil), "v1alpha1.PropertyType")
	proto.RegisterType((*PropertyTypeInt64)(nil), "v1alpha1.PropertyTypeInt64")
	proto.RegisterType((*PropertyTypeString)(nil), "v1alpha1.PropertyTypeString")
	proto.RegisterType((*PropertyTypeDouble)(nil), "v1alpha1.PropertyTypeDouble")
	proto.RegisterType((*PropertyTypeFloat)(nil), "v1alpha1.PropertyTypeFloat")
	proto.RegisterType((*PropertyTypeBoolean)(nil), "v1alpha1.PropertyTypeBoolean")
	proto.RegisterType((*PropertyTypeBytes)(nil), "v1alpha1.PropertyTypeBytes")
	proto.RegisterType((*DeviceCommand)(nil), "v1alpha1.DeviceCommand")
	proto.RegisterType((*Device)(nil), "v1alpha1.Device")
	proto.RegisterType((*DeviceSpec)(nil), "v1alpha1.DeviceSpec")
	proto.RegisterType((*ProtocolConfig)(nil), "v1alpha1.ProtocolConfig")
	proto.RegisterType((*ProtocolConfigOpcUA)(nil), "v1alpha1.ProtocolConfigOpcUA")
	proto.RegisterType((*ProtocolConfigModbus)(nil), "v1alpha1.ProtocolConfigModbus")
	proto.RegisterType((*ProtocolConfigBluetooth)(nil), "v1alpha1.ProtocolConfigBluetooth")
	proto.RegisterType((*ProtocolConfigCommon)(nil), "v1alpha1.ProtocolConfigCommon")
	proto.RegisterType((*ProtocolConfigCOM)(nil), "v1alpha1.ProtocolConfigCOM")
	proto.RegisterType((*ProtocolConfigTCP)(nil), "v1alpha1.ProtocolConfigTCP")
	proto.RegisterType((*CustomizedValue)(nil), "v1alpha1.CustomizedValue")
	proto.RegisterType((*ProtocolConfigCustomized)(nil), "v1alpha1.ProtocolConfigCustomized")
	proto.RegisterType((*DevicePropertyVisitor)(nil), "v1alpha1.DevicePropertyVisitor")
	proto.RegisterType((*VisitorConfigPushMethod)(nil), "v1alpha1.VisitorConfigPushMethod")
	proto.RegisterType((*VisitorConfigDbProvider)(nil), "v1alpha1.VisitorConfigDbProvider")
	proto.RegisterType((*DbProviderInflux)(nil), "v1alpha1.DbProviderInflux")
	proto.RegisterType((*DataStandard)(nil), "v1alpha1.DataStandard")
	proto.RegisterType((*ConfigData)(nil), "v1alpha1.ConfigData")
	proto.RegisterType((*PushMethodMQTT)(nil), "v1alpha1.PushMethodMQTT")
	proto.RegisterType((*PushMethodHTTP)(nil), "v1alpha1.PushMethodHTTP")
	proto.RegisterType((*VisitorConfigOPCUA)(nil), "v1alpha1.VisitorConfigOPCUA")
	proto.RegisterType((*VisitorConfigModbus)(nil), "v1alpha1.VisitorConfigModbus")
	proto.RegisterType((*VisitorConfigBluetooth)(nil), "v1alpha1.VisitorConfigBluetooth")
	proto.RegisterType((*BluetoothReadConverter)(nil), "v1alpha1.BluetoothReadConverter")
	proto.RegisterType((*BluetoothOperations)(nil), "v1alpha1.BluetoothOperations")
	proto.RegisterType((*VisitorConfigCustomized)(nil), "v1alpha1.VisitorConfigCustomized")
	proto.RegisterType((*MapperInfo)(nil), "v1alpha1.MapperInfo")
	proto.RegisterType((*ReportDeviceStatusRequest)(nil), "v1alpha1.ReportDeviceStatusRequest")
	proto.RegisterType((*DeviceStatus)(nil), "v1alpha1.DeviceStatus")
	proto.RegisterType((*Twin)(nil), "v1alpha1.Twin")
	proto.RegisterType((*TwinProperty)(nil), "v1alpha1.TwinProperty")
	proto.RegisterType((*ReportDeviceStatusResponse)(nil), "v1alpha1.ReportDeviceStatusResponse")
	proto.RegisterType((*RegisterDeviceRequest)(nil), "v1alpha1.RegisterDeviceRequest")
	proto.RegisterType((*RegisterDeviceResponse)(nil), "v1alpha1.RegisterDeviceResponse")
	proto.RegisterType((*CreateDeviceModelRequest)(nil), "v1alpha1.CreateDeviceModelRequest")
	proto.RegisterType((*CreateDeviceModelResponse)(nil), "v1alpha1.CreateDeviceModelResponse")
	proto.RegisterType((*RemoveDeviceRequest)(nil), "v1alpha1.RemoveDeviceRequest")
	proto.RegisterType((*RemoveDeviceResponse)(nil), "v1alpha1.RemoveDeviceResponse")
	proto.RegisterType((*RemoveDeviceModelRequest)(nil), "v1alpha1.RemoveDeviceModelRequest")
	proto.RegisterType((*RemoveDeviceModelResponse)(nil), "v1alpha1.RemoveDeviceModelResponse")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "v1alpha1.UpdateDeviceRequest")
	proto.RegisterType((*UpdateDeviceResponse)(nil), "v1alpha1.UpdateDeviceResponse")
	proto.RegisterType((*UpdateDeviceModelRequest)(nil), "v1alpha1.UpdateDeviceModelRequest")
	proto.RegisterType((*UpdateDeviceModelResponse)(nil), "v1alpha1.UpdateDeviceModelResponse")
	proto.RegisterType((*UpdateDeviceStatusRequest)(nil), "v1alpha1.UpdateDeviceStatusRequest")
	proto.RegisterType((*UpdateDeviceStatusResponse)(nil), "v1alpha1.UpdateDeviceStatusResponse")
	proto.RegisterType((*GetDeviceRequest)(nil), "v1alpha1.GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "v1alpha1.GetDeviceResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x6f, 0xdc, 0xc8,
	0x11, 0x36, 0xe7, 0xa5, 0x99, 0xd2, 0x63, 0xe5, 0x96, 0xac, 0x1d, 0x8f, 0xbd, 0xb6, 0x42, 0x1b,
	0x81, 0xe0, 0x78, 0x65, 0x5b, 0xf6, 0xae, 0xbd, 0x8f, 0xec, 0xc6, 0x1e, 0x3f, 0xe2, 0xd8, 0x5a,
	0x6b, 0xdb, 0xb2, 0xf3, 0x38, 0xec, 0xa2, 0x45, 0xf6, 0x48, 0x84, 0x67, 0x48, 0x9a, 0xec, 0x91,
	0x3c, 0x49, 0x80, 0xe4, 0x10, 0x20, 0xd7, 0x5c, 0x03, 0x24, 0x48, 0x82, 0x1c, 0x02, 0xe4, 0x9e,
	0x5f, 0x90, 0xcb, 0x22, 0xc8, 0x21, 0xd7, 0x9c, 0xf2, 0x57, 0x82, 0xea, 0x6e, 0x92, 0x4d, 0x0e,
	0x39, 0xb2, 0x1d, 0x20, 0xa7, 0x99, 0xaa, 0xfe, 0xaa, 0xba, 0xaa, 0xbb, 0xba, 0xaa, 0xd8, 0x0d,
	0x1d, 0x16, 0x7a, 0x9b, 0x61, 0x14, 0x88, 0x80, 0xb4, 0x0f, 0xaf, 0xb1, 0x61, 0x78, 0xc0, 0xae,
	0xf5, 0x4e, 0xef, 0x07, 0xc1, 0xfe, 0x90, 0x5f, 0x91, 0xfc, 0xbd, 0xf1, 0xe0, 0x0a, 0xf3, 0x27,
	0x0a, 0x64, 0x33, 0x38, 0xb5, 0xcd, 0xc2, 0x90, 0x47, 0x94, 0xef, 0x7b, 0xb1, 0xc0, 0xdf, 0x97,
	0x63, 0x1e, 0x0b, 0xd2, 0x83, 0xf6, 0x91, 0x27, 0x0e, 0xee, 0x32, 0xc1, 0xba, 0xd6, 0xba, 0xb5,
	0xd1, 0xa6, 0x29, 0x4d, 0x2e, 0x43, 0x6b, 0x24, 0x85, 0xba, 0xb5, 0x75, 0x6b, 0x63, 0x7e, 0x6b,
	0x75, 0x33, 0x99, 0x6a, 0x53, 0x29, 0x7b, 0xe8, 0x0f, 0x02, 0xaa, 0x31, 0xf6, 0x2f, 0x60, 0xad,
	0x38, 0x45, 0x1c, 0x06, 0x7e, 0xcc, 0xc9, 0x75, 0xe8, 0x8c, 0x02, 0x97, 0x0f, 0x1f, 0x7b, 0xb1,
	0xe8, 0x5a, 0xeb, 0xf5, 0x8d, 0xf9, 0xad, 0x53, 0x99, 0xaa, 0xbb, 0xfc, 0xd0, 0x73, 0xf8, 0x36,
	0x02, 0x68, 0x86, 0x23, 0x57, 0x01, 0x5c, 0x39, 0x22, 0xa5, 0x6a, 0x52, 0x6a, 0xb9, 0x28, 0x45,
	0x0d, 0x8c, 0xbd, 0x03, 0xf3, 0x86, 0x2e, 0x42, 0xa0, 0xe1, 0xb3, 0x11, 0x97, 0x5e, 0x75, 0xa8,
	0xfc, 0x4f, 0xde, 0x87, 0x46, 0x1c, 0x72, 0x47, 0xfb, 0x73, 0xba, 0xd4, 0x88, 0xa7, 0x21, 0x77,
	0xa8, 0x84, 0xd9, 0xbf, 0xb3, 0xe0, 0x9d, 0xc2, 0x08, 0xb9, 0x05, 0x10, 0x46, 0x41, 0xc8, 0x23,
	0xe1, 0xf1, 0x58, 0x7b, 0xd3, 0x2d, 0x2a, 0xda, 0x51, 0x88, 0x09, 0x35, 0xb0, 0xe4, 0x3a, 0xb4,
	0x9d, 0x60, 0x34, 0x62, 0xbe, 0x1b, 0x6b, 0x7f, 0xde, 0x2d, 0xca, 0xf5, 0xd5, 0x38, 0x4d, 0x81,
	0xb8, 0x3f, 0x72, 0x07, 0x9d, 0x60, 0xd8, 0xad, 0x4b, 0x4f, 0x52, 0xda, 0x8e, 0x60, 0x29, 0x3f,
	0x5d, 0xa9, 0xcf, 0xeb, 0x30, 0xef, 0xf2, 0xd8, 0x89, 0xbc, 0x50, 0x78, 0x81, 0x2f, 0x5d, 0xef,
	0x50, 0x93, 0x45, 0x2e, 0x41, 0x43, 0x4c, 0x42, 0x2e, 0xf5, 0xcf, 0x6f, 0xad, 0x65, 0x46, 0x25,
	0x7a, 0x77, 0x27, 0x21, 0xa7, 0x12, 0x63, 0x7f, 0x53, 0x83, 0x05, 0x93, 0x4d, 0xde, 0x87, 0xba,
	0xe7, 0x0b, 0x39, 0xe3, 0xfc, 0xd6, 0x99, 0x72, 0xd9, 0x87, 0xbe, 0xf8, 0xf0, 0x06, 0x45, 0x1c,
	0xb9, 0x01, 0xad, 0x58, 0x44, 0x9e, 0xbf, 0xaf, 0xf7, 0xe0, 0x6c, 0xb9, 0xc4, 0x53, 0x89, 0xa1,
	0x1a, 0x8b, 0x52, 0x6e, 0x30, 0xde, 0x1b, 0x26, 0x36, 0x56, 0x48, 0xdd, 0x95, 0x18, 0xaa, 0xb1,
	0xe4, 0x1a, 0x34, 0x07, 0xc3, 0x80, 0x89, 0x6e, 0x63, 0x96, 0x71, 0xf7, 0x11, 0x42, 0x15, 0x92,
	0xdc, 0x84, 0xb9, 0xbd, 0x20, 0x18, 0x72, 0xe6, 0x77, 0x9b, 0x52, 0xe8, 0xbd, 0x72, 0xa1, 0x3b,
	0x0a, 0x44, 0x13, 0x34, 0xce, 0xb5, 0x37, 0x11, 0x3c, 0xee, 0xb6, 0x66, 0xcd, 0x75, 0x07, 0x21,
	0x54, 0x21, 0xed, 0x3f, 0x58, 0x70, 0x72, 0x6a, 0x95, 0xc8, 0x39, 0x00, 0xe6, 0x38, 0x3c, 0x8e,
	0x31, 0xe4, 0xf4, 0x46, 0x1a, 0x1c, 0x62, 0xc3, 0x82, 0xcb, 0x07, 0x6c, 0x3c, 0x14, 0xcf, 0xd9,
	0x70, 0xcc, 0xe5, 0x32, 0xd6, 0x69, 0x8e, 0x47, 0xba, 0x30, 0x37, 0xf2, 0x7c, 0x6f, 0x34, 0x1e,
	0xc9, 0xf5, 0xaa, 0xd3, 0x84, 0x94, 0x23, 0xec, 0x95, 0x1c, 0x69, 0xe8, 0x11, 0x45, 0x62, 0xe8,
	0x8c, 0x7d, 0x4f, 0x48, 0xb7, 0x3b, 0x54, 0xfe, 0xb7, 0x7f, 0x04, 0x64, 0x7a, 0x53, 0xde, 0xca,
	0xc2, 0x4e, 0xde, 0x42, 0xfb, 0x8f, 0x56, 0x5e, 0xb5, 0xda, 0xb9, 0xb7, 0x52, 0x6d, 0xcd, 0x76,
	0xde, 0xaa, 0x74, 0xde, 0x9a, 0xed, 0x7c, 0x71, 0x7b, 0x64, 0x9c, 0xbc, 0x95, 0x85, 0xb5, 0xd9,
	0x16, 0xd6, 0x2a, 0x2d, 0xac, 0xcd, 0xb6, 0xf0, 0xc7, 0xb0, 0x52, 0x12, 0x93, 0x6f, 0x65, 0x62,
	0xbb, 0xb0, 0x3f, 0xd7, 0xf3, 0xbe, 0xcb, 0xb8, 0x3d, 0x4e, 0xb1, 0xfd, 0x57, 0x0b, 0x16, 0x73,
	0x79, 0xac, 0x34, 0x1f, 0x2d, 0x43, 0x7d, 0x1c, 0x0d, 0x75, 0x54, 0xe0, 0x5f, 0xb2, 0x06, 0xad,
	0x11, 0x17, 0x07, 0x81, 0xab, 0x33, 0x9c, 0xa6, 0xc8, 0x79, 0x98, 0x8f, 0x05, 0x13, 0xe3, 0xf8,
	0x6b, 0x07, 0x27, 0x6c, 0xac, 0xd7, 0x71, 0x42, 0xc5, 0xea, 0xa3, 0x27, 0xe7, 0x00, 0x42, 0x16,
	0xb1, 0x11, 0x17, 0x3c, 0x8a, 0xbb, 0x4d, 0x35, 0x9e, 0x71, 0x30, 0x79, 0x46, 0xba, 0x08, 0xc9,
	0x73, 0xb9, 0x40, 0x53, 0xda, 0x3e, 0x84, 0x96, 0xb2, 0xb5, 0xd4, 0xc8, 0x8d, 0x5c, 0xa1, 0x58,
	0x2d, 0xe6, 0xe9, 0xac, 0x46, 0x90, 0x4d, 0x4c, 0x68, 0x68, 0xd1, 0x74, 0xfa, 0xd4, 0x58, 0x39,
	0x4a, 0x35, 0xca, 0xfe, 0xbb, 0x05, 0x90, 0x29, 0x21, 0x5b, 0xb0, 0xea, 0x1a, 0x05, 0x90, 0x0f,
	0x78, 0xc4, 0x7d, 0x27, 0x31, 0xa6, 0x74, 0x8c, 0xdc, 0x30, 0x6a, 0x82, 0x32, 0xb0, 0x9b, 0x4b,
	0x37, 0x72, 0xa4, 0x1f, 0xf8, 0x03, 0x6f, 0x3f, 0xab, 0x16, 0xe4, 0x11, 0x2c, 0xeb, 0x62, 0x34,
	0x79, 0xee, 0xc5, 0x9e, 0x08, 0x22, 0x34, 0x19, 0xcb, 0xd0, 0xf9, 0xaa, 0xf2, 0xa5, 0x71, 0x74,
	0x4a, 0xd0, 0xfe, 0x47, 0x0d, 0x96, 0xf2, 0x33, 0x91, 0xeb, 0xd0, 0x0c, 0x42, 0x67, 0xcc, 0x74,
	0x29, 0x78, 0xaf, 0xca, 0xa4, 0x27, 0xa1, 0xf3, 0xec, 0x36, 0x55, 0x58, 0xf2, 0x21, 0xb4, 0x46,
	0x81, 0xbb, 0x37, 0x8e, 0xb5, 0x23, 0xe7, 0xaa, 0xa4, 0xb6, 0x25, 0x8a, 0x6a, 0x34, 0xf9, 0x1c,
	0x3a, 0x7b, 0xc3, 0x31, 0x17, 0x41, 0x20, 0x0e, 0xf4, 0xc2, 0x7f, 0xab, 0x4a, 0xf4, 0x4e, 0x02,
	0xa4, 0x99, 0x0c, 0x4e, 0x8c, 0x35, 0x36, 0xf0, 0x75, 0x71, 0xa8, 0x9c, 0xb8, 0x2f, 0x51, 0x54,
	0xa3, 0x09, 0x05, 0xe2, 0x8c, 0x63, 0x11, 0x8c, 0xbc, 0x9f, 0x72, 0x37, 0x41, 0xea, 0x5a, 0x61,
	0x57, 0xea, 0x48, 0x25, 0x68, 0x89, 0xb4, 0xfd, 0xeb, 0x9a, 0x3c, 0xc8, 0xc5, 0x35, 0x4a, 0x4e,
	0x8a, 0x95, 0x9d, 0x94, 0x1e, 0xb4, 0xc7, 0x31, 0x8f, 0xbe, 0xc0, 0x70, 0x55, 0x07, 0x28, 0xa5,
	0x65, 0xa7, 0xc0, 0xe2, 0xf8, 0x28, 0x88, 0xdc, 0xb4, 0x53, 0xd0, 0x34, 0xf9, 0x36, 0x2c, 0xc5,
	0xdc, 0x19, 0x47, 0x9e, 0x98, 0xec, 0x04, 0x43, 0xcf, 0x99, 0x48, 0xaf, 0x3b, 0xb4, 0xc0, 0xc5,
	0xd4, 0x90, 0x70, 0xe4, 0x19, 0x57, 0xd9, 0x26, 0xc7, 0xc3, 0x7e, 0xc2, 0xc1, 0x8e, 0x66, 0xe0,
	0x39, 0x4c, 0xa8, 0x73, 0xd5, 0xa1, 0x26, 0x4b, 0x1e, 0xcb, 0xc8, 0x3b, 0x64, 0x82, 0x3f, 0xe2,
	0x93, 0xee, 0x9c, 0xca, 0x13, 0x19, 0x07, 0xb3, 0x9c, 0xf0, 0x46, 0x3c, 0x18, 0x8b, 0x6e, 0x5b,
	0x15, 0x21, 0x4d, 0xda, 0x57, 0x61, 0xb5, 0x6c, 0xdb, 0x51, 0x22, 0x1e, 0xb2, 0x43, 0xfe, 0xf0,
	0xae, 0x5c, 0x8d, 0x3a, 0x4d, 0x48, 0xfb, 0x23, 0x78, 0xb7, 0x62, 0xb7, 0xd1, 0x8c, 0x11, 0x73,
	0x6e, 0xbb, 0x6e, 0xc4, 0xe3, 0x38, 0x49, 0x57, 0x19, 0xc7, 0xfe, 0x53, 0xbd, 0x38, 0x9b, 0xda,
	0x6b, 0x6c, 0x69, 0x9c, 0x60, 0x54, 0xda, 0xd2, 0x98, 0xe0, 0x27, 0xdb, 0x14, 0x71, 0x08, 0x17,
	0x4e, 0xa8, 0x03, 0xb8, 0x12, 0xbe, 0xdb, 0xdf, 0xa1, 0x88, 0xc3, 0x7d, 0xc2, 0x58, 0xda, 0x4d,
	0x3a, 0xae, 0x0e, 0x4d, 0x69, 0x72, 0x11, 0x16, 0x23, 0xee, 0x04, 0xbe, 0xbf, 0xab, 0xd7, 0x47,
	0x15, 0xe9, 0x3c, 0x93, 0x5c, 0x82, 0x65, 0xc5, 0xa0, 0x5c, 0x44, 0x13, 0xe4, 0xc6, 0x72, 0xa7,
	0xea, 0x74, 0x8a, 0x8f, 0x3b, 0xef, 0x04, 0xc3, 0x21, 0x77, 0x44, 0xa2, 0xb2, 0x25, 0x91, 0x05,
	0x2e, 0xb9, 0x0c, 0x27, 0x35, 0xc7, 0x50, 0x3a, 0x27, 0xa1, 0xd3, 0x03, 0x32, 0x06, 0xb4, 0x3c,
	0xba, 0xd1, 0xd6, 0x31, 0x90, 0xb1, 0xc8, 0x3d, 0x58, 0xce, 0x22, 0x5d, 0xd6, 0x94, 0xb8, 0xdb,
	0x29, 0x76, 0xdd, 0xfd, 0x3c, 0x82, 0x4e, 0x89, 0x24, 0x45, 0x38, 0xbf, 0xec, 0xb8, 0xb3, 0x31,
	0x8f, 0x3c, 0x36, 0xdc, 0x09, 0x22, 0x91, 0xec, 0x6c, 0xc6, 0xc1, 0x25, 0xde, 0x63, 0x63, 0x97,
	0x62, 0x7c, 0xaa, 0xfe, 0x28, 0xa5, 0x71, 0xcc, 0x65, 0x82, 0xdd, 0xf1, 0x44, 0xac, 0x9b, 0xa3,
	0x94, 0xc6, 0x42, 0x14, 0x32, 0x0c, 0x74, 0x7d, 0x3c, 0x34, 0x85, 0x32, 0xb1, 0x08, 0x42, 0x29,
	0xa3, 0x16, 0x3a, 0xa5, 0xed, 0x9b, 0x45, 0x03, 0x77, 0xfb, 0x3b, 0x64, 0x09, 0x6a, 0x5e, 0xa8,
	0x0d, 0xab, 0x79, 0x21, 0x96, 0x98, 0x10, 0x4d, 0x55, 0xc6, 0xc8, 0xff, 0xf6, 0x6f, 0x2d, 0x78,
	0xa7, 0xb0, 0x00, 0xe4, 0x26, 0x34, 0x5c, 0xf5, 0x25, 0x86, 0x79, 0xf9, 0x42, 0xe5, 0x4a, 0x6d,
	0xe2, 0xf7, 0xd9, 0x3d, 0x5f, 0x44, 0x13, 0x2a, 0x05, 0x7a, 0xdb, 0xd0, 0x49, 0x59, 0x98, 0x37,
	0x5e, 0xf0, 0x49, 0x92, 0x37, 0x5e, 0xf0, 0x09, 0xb9, 0x04, 0xcd, 0xc3, 0xb4, 0xd6, 0x63, 0x3d,
	0x53, 0x5f, 0x8a, 0x9b, 0xc9, 0x97, 0xe2, 0xe6, 0x6d, 0x7f, 0x42, 0x15, 0xe4, 0xe3, 0xda, 0x2d,
	0xcb, 0x9e, 0x40, 0xb7, 0x2a, 0x83, 0x61, 0x8e, 0x48, 0x6a, 0xca, 0x17, 0x59, 0xd9, 0xcc, 0xf1,
	0xc8, 0x47, 0x00, 0x8e, 0x94, 0x93, 0xdf, 0x95, 0xb5, 0xe3, 0xf6, 0xdd, 0x00, 0xdb, 0xff, 0x6c,
	0xc0, 0xa9, 0xd2, 0x2a, 0xa4, 0x27, 0x96, 0xac, 0xc2, 0xc4, 0x29, 0x0f, 0x03, 0x33, 0xe2, 0xb8,
	0xbc, 0xfd, 0x89, 0x33, 0x4c, 0x36, 0xdf, 0x64, 0xa1, 0x16, 0x1d, 0xa7, 0x0a, 0xa2, 0x62, 0x20,
	0xc7, 0x2b, 0x0d, 0xde, 0xc6, 0x1b, 0x07, 0x2f, 0xd9, 0x4a, 0x2a, 0x62, 0xb3, 0xf8, 0xd1, 0xa2,
	0x5d, 0xd2, 0xc9, 0x7e, 0xa7, 0x9f, 0x15, 0xc4, 0x0f, 0xd2, 0x82, 0xd8, 0x2a, 0x96, 0xd1, 0x9c,
	0x50, 0xa1, 0x1e, 0x7e, 0x66, 0xd6, 0xc3, 0x39, 0x29, 0xb9, 0x5e, 0x21, 0x59, 0x5a, 0x0e, 0xbf,
	0x2c, 0x2d, 0x6b, 0xed, 0x62, 0x61, 0xcd, 0x29, 0x9a, 0x5d, 0xd5, 0xc8, 0x6d, 0x80, 0x70, 0x1c,
	0x1f, 0x6c, 0xab, 0xce, 0xae, 0x33, 0x53, 0xd5, 0x4e, 0x0a, 0xa4, 0x86, 0x10, 0xaa, 0x70, 0xf7,
	0x76, 0xa2, 0xe0, 0xd0, 0x73, 0x79, 0xd4, 0x85, 0x99, 0x2a, 0xee, 0xa6, 0x40, 0x6a, 0x08, 0xd9,
	0xdf, 0x58, 0xf0, 0x6e, 0xc5, 0x54, 0x15, 0x4e, 0x5b, 0xff, 0x8b, 0xd3, 0x97, 0xa1, 0x71, 0x20,
	0x44, 0x58, 0xd2, 0x96, 0xa5, 0xd3, 0x7e, 0x7f, 0x77, 0x77, 0x87, 0x4a, 0x14, 0xa2, 0x47, 0x2f,
	0x85, 0xd0, 0x0d, 0x4c, 0x29, 0x7a, 0xfb, 0xcb, 0xdd, 0x5d, 0x2a, 0x51, 0xf6, 0x76, 0xc1, 0x93,
	0xcc, 0x63, 0xb2, 0x05, 0x2d, 0xcf, 0x1f, 0x0c, 0xc7, 0xaf, 0xb4, 0xf5, 0x3d, 0xa3, 0xa3, 0x4b,
	0x51, 0x0f, 0x25, 0x82, 0x6a, 0xa4, 0xfd, 0x2b, 0x0b, 0x96, 0x8b, 0x83, 0xe4, 0x46, 0xee, 0xe0,
	0x5a, 0xc5, 0xee, 0xb7, 0x9f, 0x8e, 0x99, 0x67, 0x96, 0x7c, 0x0c, 0x0b, 0x98, 0x85, 0x9e, 0x0a,
	0xe6, 0xbb, 0x2c, 0x72, 0xb5, 0xf7, 0x66, 0x27, 0x6c, 0x8c, 0xd2, 0x1c, 0xd6, 0xfe, 0xa5, 0x05,
	0x0b, 0xe6, 0x30, 0x1e, 0xe1, 0x11, 0x67, 0xf1, 0x38, 0xe2, 0x23, 0xee, 0x27, 0xd9, 0xdd, 0x64,
	0x61, 0x9a, 0x16, 0x6c, 0x1f, 0x7b, 0x0b, 0xd5, 0x03, 0x69, 0x0a, 0xd3, 0xb4, 0x60, 0xfb, 0xea,
	0xa3, 0x46, 0x57, 0xd6, 0x84, 0xc6, 0xb1, 0x81, 0xc7, 0x87, 0x2e, 0x4a, 0xa9, 0xe4, 0x9e, 0xd2,
	0xf6, 0x57, 0x00, 0x99, 0x63, 0x25, 0x5d, 0xd7, 0x2a, 0x34, 0x45, 0xf0, 0x82, 0x27, 0x77, 0x27,
	0x8a, 0x40, 0x5c, 0x10, 0xed, 0xeb, 0x89, 0xf0, 0x2f, 0xda, 0xb5, 0x37, 0x76, 0x5e, 0x70, 0x91,
	0x94, 0x0f, 0x45, 0xd9, 0x3e, 0x2c, 0xe5, 0x37, 0x14, 0xfb, 0x19, 0x96, 0xeb, 0x4b, 0x12, 0x52,
	0xcd, 0x15, 0x7a, 0x4e, 0x36, 0x57, 0xe8, 0x39, 0x38, 0xd7, 0xcb, 0x40, 0xd5, 0xab, 0x26, 0xc5,
	0xbf, 0xea, 0xd3, 0x46, 0x30, 0xcf, 0xe7, 0xae, 0x9c, 0xad, 0x4d, 0x53, 0xda, 0xfe, 0xb9, 0x39,
	0x1f, 0x86, 0x1b, 0xa2, 0x0f, 0x82, 0x58, 0x18, 0x69, 0x33, 0xa5, 0xcb, 0x6a, 0x93, 0x4a, 0xa3,
	0xf2, 0x82, 0x70, 0x87, 0xe9, 0x06, 0xbb, 0x43, 0x4d, 0x96, 0xd9, 0xc3, 0x35, 0xf2, 0x3d, 0xdc,
	0x63, 0x20, 0xd3, 0xe9, 0x0d, 0xd7, 0xc6, 0x0f, 0xdc, 0xa4, 0x81, 0xeb, 0x50, 0x4d, 0x61, 0x29,
	0xdf, 0x8b, 0x82, 0xa3, 0x98, 0x1b, 0x3d, 0xad, 0xc1, 0xb1, 0xff, 0x66, 0xc1, 0x4a, 0x49, 0xe2,
	0x53, 0xfe, 0xab, 0x7b, 0xc6, 0xc4, 0xa3, 0x84, 0xc6, 0xb9, 0x82, 0xc1, 0x20, 0xe6, 0x89, 0x4f,
	0x9a, 0xc2, 0xb5, 0x1d, 0x7a, 0x23, 0x4f, 0xe8, 0x9c, 0xaf, 0x08, 0xe4, 0xc6, 0x0e, 0x1b, 0x72,
	0x7d, 0x27, 0xa0, 0x08, 0xd4, 0xe1, 0xc5, 0x4f, 0x8f, 0x58, 0x28, 0x93, 0x77, 0x9b, 0x6a, 0x0a,
	0xfb, 0x29, 0x2f, 0x4e, 0x6e, 0x38, 0xe5, 0x78, 0x4b, 0x8e, 0x17, 0xb8, 0xf6, 0xef, 0x6b, 0xb0,
	0x56, 0x9e, 0x76, 0xc9, 0x26, 0x10, 0xe7, 0x80, 0x45, 0xcc, 0x11, 0x3c, 0xf2, 0x62, 0xe1, 0x39,
	0xcf, 0x9e, 0xa5, 0xcb, 0x52, 0x32, 0x42, 0xb6, 0xa1, 0x83, 0x27, 0xe6, 0x87, 0x91, 0x27, 0xdb,
	0x19, 0xec, 0x0c, 0xae, 0x1c, 0x97, 0xdb, 0xe5, 0x89, 0x93, 0x12, 0xaa, 0x4b, 0xc8, 0x34, 0x90,
	0xfb, 0xb0, 0x88, 0x44, 0x3f, 0xf0, 0x0f, 0x79, 0x84, 0xcb, 0x57, 0x2f, 0x96, 0x8b, 0xac, 0x42,
	0x70, 0xe6, 0xa6, 0x38, 0x9a, 0x17, 0xeb, 0x7d, 0x0a, 0x4b, 0xf9, 0x49, 0x4a, 0xfa, 0x8e, 0x55,
	0xb3, 0xef, 0x58, 0x30, 0x3b, 0x8c, 0xff, 0x58, 0xb0, 0x56, 0x3e, 0x8f, 0xec, 0xee, 0x04, 0x8b,
	0xc4, 0x43, 0xdf, 0xe5, 0xaf, 0x74, 0xbf, 0x6f, 0x70, 0x70, 0xeb, 0xb9, 0xef, 0xaa, 0x51, 0xdd,
	0xdd, 0x25, 0x34, 0x39, 0x0b, 0x9d, 0xf8, 0xc0, 0x1b, 0x88, 0xc7, 0x7c, 0xa0, 0xb6, 0xb9, 0x41,
	0x33, 0x86, 0xd4, 0x8c, 0x04, 0xf5, 0xf6, 0x0f, 0x54, 0xdc, 0x36, 0xa8, 0xc1, 0x21, 0x8f, 0xe0,
	0x64, 0x10, 0xb9, 0x3c, 0x7a, 0x32, 0x78, 0x12, 0xf2, 0x88, 0x09, 0x2f, 0xf0, 0xd5, 0xb5, 0x42,
	0xae, 0x0e, 0xa7, 0x66, 0x67, 0x20, 0x3a, 0x2d, 0x67, 0x3b, 0xb0, 0x52, 0x82, 0xc4, 0x16, 0x3f,
	0x48, 0x28, 0xd9, 0x3c, 0xab, 0xe5, 0xca, 0x33, 0x31, 0xcc, 0x52, 0x86, 0x79, 0xd5, 0x55, 0xe0,
	0xda, 0xaf, 0x0a, 0x35, 0xe1, 0xff, 0xd7, 0xa7, 0xfd, 0xc5, 0x02, 0xc8, 0x5e, 0x01, 0x4a, 0x2f,
	0x51, 0xba, 0x30, 0x77, 0xc8, 0xa3, 0x38, 0xbb, 0x75, 0x4e, 0x48, 0x72, 0x1e, 0xe6, 0x59, 0xe8,
	0x7d, 0x9d, 0x8c, 0xd6, 0xf5, 0x55, 0x52, 0xe8, 0x3d, 0xd7, 0x00, 0xf3, 0xda, 0xbb, 0x91, 0xbf,
	0xf6, 0x36, 0x93, 0x67, 0x53, 0x86, 0x95, 0x99, 0x3c, 0x63, 0x91, 0x7d, 0x94, 0x2a, 0xc2, 0xfe,
	0x19, 0x9c, 0xa6, 0xb2, 0x01, 0xcc, 0xdd, 0xc7, 0xe8, 0xf7, 0x8f, 0x73, 0xc9, 0x33, 0x83, 0xb1,
	0x46, 0x06, 0x87, 0x7c, 0x06, 0x4b, 0xaa, 0x7b, 0xe4, 0xae, 0x12, 0x2f, 0x29, 0x6e, 0xa6, 0xda,
	0x02, 0xda, 0xfe, 0x01, 0x2c, 0x98, 0xe3, 0xe4, 0x22, 0x34, 0xc5, 0x91, 0xe7, 0x27, 0x2f, 0x07,
	0x4b, 0x99, 0x9a, 0xdd, 0x23, 0xcf, 0xa7, 0x6a, 0x30, 0x73, 0xa4, 0x66, 0x3a, 0xf2, 0x1b, 0x0b,
	0x1a, 0x88, 0x7a, 0xad, 0x4e, 0xf8, 0x2a, 0xcc, 0xb9, 0x3c, 0xf6, 0x22, 0x5e, 0x52, 0x8e, 0x51,
	0x49, 0xfa, 0x44, 0x91, 0xc0, 0xc8, 0x16, 0xa6, 0x54, 0x65, 0xfc, 0xf4, 0x5d, 0x56, 0x4e, 0x24,
	0xc5, 0xd9, 0x7f, 0xb6, 0x60, 0xc1, 0x1c, 0xca, 0x4e, 0xbc, 0xb2, 0x49, 0x11, 0xe4, 0x7b, 0xd0,
	0x1e, 0x71, 0xc1, 0x5c, 0x15, 0x65, 0xe8, 0xf8, 0xc5, 0x72, 0xd5, 0x9b, 0xdb, 0x1a, 0xa6, 0xd2,
	0x56, 0x2a, 0xd5, 0xfb, 0x04, 0x16, 0x73, 0x43, 0xc7, 0x25, 0x9b, 0x8e, 0x99, 0x6c, 0xce, 0x42,
	0xaf, 0x2c, 0x02, 0xf4, 0x4d, 0xe0, 0x6d, 0x38, 0x95, 0xa4, 0x6e, 0xfd, 0xaa, 0xa4, 0x63, 0x63,
	0x03, 0x5a, 0x2a, 0x12, 0x74, 0x23, 0x34, 0xfd, 0xfc, 0xa4, 0xc7, 0xed, 0x5b, 0xb0, 0x56, 0x54,
	0xa1, 0xdf, 0xbe, 0x8e, 0x89, 0x2f, 0xfb, 0x01, 0x74, 0xfb, 0x11, 0x67, 0x82, 0x9b, 0xcf, 0x60,
	0x7a, 0xfe, 0xef, 0x40, 0x53, 0xbe, 0x87, 0xe9, 0xe9, 0x2b, 0xde, 0xcc, 0x14, 0xc6, 0xbe, 0x07,
	0xa7, 0x4b, 0x14, 0x69, 0x2b, 0x36, 0xe0, 0x1d, 0xe3, 0x26, 0xd1, 0x30, 0xa5, 0xc8, 0xb6, 0x3f,
	0x80, 0x15, 0xca, 0x47, 0xc1, 0x21, 0xcf, 0x2f, 0xc5, 0x71, 0x6e, 0xac, 0xc1, 0x6a, 0x5e, 0x4c,
	0xaf, 0xed, 0x2d, 0xe8, 0x9a, 0xfc, 0x9c, 0x7b, 0x67, 0xf5, 0xb3, 0xa0, 0xa1, 0x32, 0x63, 0xd8,
	0x67, 0xf0, 0xd4, 0x4e, 0x49, 0x6a, 0xb5, 0x9f, 0xc3, 0xca, 0xb3, 0xd0, 0x4d, 0x9d, 0x7d, 0xf3,
	0x0d, 0x5b, 0x83, 0xd5, 0xbc, 0x02, 0xad, 0xf8, 0x01, 0x74, 0x4d, 0xfe, 0xdb, 0x6f, 0xc7, 0x19,
	0x38, 0x5d, 0xa2, 0x48, 0xcf, 0x32, 0xc9, 0x0f, 0xbe, 0x59, 0x46, 0xfa, 0x14, 0x16, 0xf5, 0x89,
	0x7d, 0xad, 0x84, 0x94, 0x07, 0xe3, 0x51, 0x28, 0x9b, 0x5a, 0x1b, 0xb6, 0x05, 0xcb, 0x0f, 0xb8,
	0x78, 0xb3, 0xad, 0xff, 0x2e, 0x9c, 0x34, 0x64, 0xd2, 0x80, 0x7b, 0xcd, 0x9d, 0xd8, 0xfa, 0x97,
	0x05, 0xab, 0x7a, 0x8d, 0x98, 0xcf, 0xf6, 0x79, 0xf4, 0x94, 0x47, 0xf2, 0x5a, 0xfe, 0x19, 0x2c,
	0xe5, 0xdf, 0x93, 0xc9, 0xf9, 0xe2, 0xfb, 0x73, 0xe1, 0x31, 0xbb, 0xb7, 0x5e, 0x0d, 0xd0, 0x0e,
	0x9e, 0x20, 0x0c, 0xc8, 0x74, 0x2e, 0x20, 0xc6, 0x55, 0x4b, 0x65, 0xad, 0xe8, 0x5d, 0x9c, 0x0d,
	0x4a, 0xa6, 0xd8, 0xfa, 0x77, 0x13, 0x56, 0x12, 0x97, 0xd0, 0x0a, 0xc3, 0xa3, 0x7c, 0x96, 0x30,
	0x3d, 0x2a, 0x4d, 0x41, 0xa6, 0x47, 0xe5, 0x09, 0xc6, 0x3e, 0x41, 0x9e, 0xc0, 0x82, 0x79, 0x52,
	0xc8, 0x7b, 0xa6, 0xcc, 0xd4, 0x51, 0xee, 0x9d, 0xab, 0x1a, 0x36, 0x15, 0x9a, 0x31, 0x62, 0x2a,
	0x2c, 0x39, 0x75, 0xa6, 0xc2, 0xd2, 0x33, 0x75, 0x82, 0x7c, 0x05, 0x27, 0xa7, 0x72, 0x13, 0x31,
	0x6e, 0xcb, 0xab, 0x32, 0x60, 0xef, 0xc2, 0x4c, 0x8c, 0xa9, 0x7f, 0x2a, 0x57, 0x98, 0xfa, 0xab,
	0x52, 0x50, 0xef, 0xc2, 0x4c, 0x8c, 0xa9, 0x7f, 0xea, 0x30, 0x9b, 0xfa, 0xab, 0x52, 0x86, 0xa9,
	0xbf, 0x3a, 0x1b, 0xc8, 0x98, 0x9c, 0x3e, 0x94, 0xa4, 0x42, 0xb8, 0x32, 0x26, 0x67, 0x9c, 0xeb,
	0x13, 0xe4, 0x3e, 0x74, 0xd2, 0x53, 0x4a, 0x8c, 0xeb, 0x81, 0xe2, 0x71, 0xef, 0x9d, 0x29, 0x1d,
	0x4b, 0xf4, 0xdc, 0x59, 0xfc, 0xc9, 0xfc, 0xe6, 0x95, 0x4f, 0x12, 0xc8, 0x5e, 0x4b, 0x76, 0x65,
	0xd7, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x24, 0xd7, 0xd3, 0x90, 0x22, 0x00, 0x00,
}

func NewMapperClient(cc grpc.ClientConnInterface) DeviceMapperServiceClient {
	return &deviceMapperServiceClient{cc}
}

func NewDeviceManageClient(cc grpc.ClientConnInterface) DeviceManagerServiceClient {
	return &deviceManagerServiceClient{cc}
}

